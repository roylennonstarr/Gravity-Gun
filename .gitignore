
PImage gun;
import shiffman.box2d.*;
import org.jbox2d.collision.shapes.*;
import org.jbox2d.common.*;
import org.jbox2d.dynamics.*;

// A reference to our box2d world
Box2DProcessing box2d;

// A list we'll use to track fixed objects
ArrayList<Boundary> boundaries;
// A list for all of our rectangles
ArrayList<Box> boxes;

void setup() {
  size(1000,500);
  smooth();
  gun = loadImage("Gun.png");

  // Initialize box2d physics and create the world
  box2d = new Box2DProcessing(this);
  box2d.createWorld();
  // We are setting a custom gravity
  box2d.setGravity(0, -100);

  // Create ArrayLists	
  boxes = new ArrayList<Box>();
  boundaries = new ArrayList<Boundary>();

  // Add a bunch of fixed boundaries
  boundaries.add(new Boundary(width/4,height-5,width/2-50,10));
  boundaries.add(new Boundary(height,5,10,100));
  boundaries.add(new Boundary(50,250,10,100));
  boundaries.add(new Boundary(250,350,10,100));
  boundaries.add(new Boundary(50,250,10,100));
  boundaries.add(new Boundary(1000,0,10,900));
  boundaries.add(new Boundary(350,500,10,100));
  boundaries.add(new Boundary(50,250,10,100));
  boundaries.add(new Boundary(750,480,10,100));
  boundaries.add(new Boundary(800,0,10,500));
  boundaries.add(new Boundary(300,0,10,400));
  boundaries.add(new Boundary(650,500,10,100));
  boundaries.add(new Boundary(700,250,10,100));
  boundaries.add(new Boundary(500,0,800,10));
  boundaries.add(new Boundary(0,500,800,10));
}

void draw() {
  background(#8DE5A2);
  image(gun, mouseX-100,mouseY-28);
  text("Hold left clic to shoot, press w, a, s and d to change direction", 10,50);
  text("Get the bullets to the bottom", 10, 70);
  fill(#8EEADF);
  textSize(15);

  // We must always step through time!
  box2d.step();

  // Boxes fall from the top every so often
  if (mousePressed == true) {
    Box p = new Box(mouseX,mouseY);
    boxes.add(p);
    box2d.setGravity(50,0);
  }

  // Display all the boundaries
  for (Boundary wall: boundaries) {
    wall.display();
  }

  // Display all the boxes
  for (Box b: boxes) {
    b.display();
  }

  // Boxes that leave the screen, we delete them
  // (note they have to be deleted from both the box2d world and our list
  for (int i = boxes.size()-1; i >= 0; i--) {
    Box b = boxes.get(i);
    if (b.done()) {
      boxes.remove(i);
    }
  }
}
void keyPressed(){
  if(key == 'w'){
    box2d.setGravity(0, 50);
  }
  if(key == 's'){
    box2d.setGravity(0, -50);
  }
  if(key == 'd'){
    box2d.setGravity(50, 0);
  }
  if(key == 'a'){
    box2d.setGravity(-50, 0);
  }

    
    
  }
	

class Boundary {

  // A boundary is a simple rectangle with x,y,width,and height
  float x;
  float y;
  float w;
  float h;
  
  // But we also have to make a body for box2d to know about it
  Body b;

  Boundary(float x_,float y_, float w_, float h_) {
    x = x_;
    y = y_;
    w = w_;
    h = h_;

    // Define the polygon
    PolygonShape sd = new PolygonShape();
    // Figure out the box2d coordinates
    float box2dW = box2d.scalarPixelsToWorld(w/2);
    float box2dH = box2d.scalarPixelsToWorld(h/2);
    // We're just a box
    sd.setAsBox(box2dW, box2dH);


    // Create the body
    BodyDef bd = new BodyDef();
    bd.type = BodyType.STATIC;
    bd.position.set(box2d.coordPixelsToWorld(x,y));
    b = box2d.createBody(bd);
    
    // Attached the shape to the body using a Fixture
    b.createFixture(sd,1);
  }

  // Draw the boundary, if it were at an angle we'd have to do something fancier
  void display() {
    fill(#AF8DE5);
    noStroke();
    rectMode(CENTER);
    rect(x,y,w,h);
  }

}


// A rectangular box
class Box {

  // We need to keep track of a Body and a width and height
  Body body;
  float w;
  float h;

  // Constructor
  Box(float x, float y) {
    w = random(4, 16);
    h = random(4, 16);
    // Add the box to the box2d world
    makeBody(new Vec2(x, y), w, h);
  }

  // This function removes the particle from the box2d world
  void killBody() {
    box2d.destroyBody(body);
  }

  // Is the particle ready for deletion?
  boolean done() {
    // Let's find the screen position of the particle
    Vec2 pos = box2d.getBodyPixelCoord(body);
    // Is it off the bottom of the screen?
    if (pos.y > height+w*h) {
      killBody();
      background(0);
      text("1 point", 500,250);
      textSize(20);
      return true; 
    }
    return false;
  }

  // Drawing the box
  void display() {
    // We look at each body and get its screen position
    Vec2 pos = box2d.getBodyPixelCoord(body);
    // Get its angle of rotation
    float a = body.getAngle();

    rectMode(CENTER);
    pushMatrix();
    translate(pos.x, pos.y);
    rotate(-a);
    fill(random(255));

    rect(0, 0, w, h);
    popMatrix();
  }

  // This function adds the rectangle to the box2d world
  void makeBody(Vec2 center, float w_, float h_) {

    // Define a polygon (this is what we use for a rectangle)
    PolygonShape sd = new PolygonShape();
    float box2dW = box2d.scalarPixelsToWorld(w_/2);
    float box2dH = box2d.scalarPixelsToWorld(h_/2);
    sd.setAsBox(box2dW, box2dH);

    // Define a fixture
    FixtureDef fd = new FixtureDef();
    fd.shape = sd;
    // Parameters that affect physics
    fd.density = 1;
    fd.friction = 0.3;
    fd.restitution = 0.5;

    // Define the body and make it from the shape
    BodyDef bd = new BodyDef();
    bd.type = BodyType.DYNAMIC;
    bd.position.set(box2d.coordPixelsToWorld(center));

    body = box2d.createBody(bd);
    body.createFixture(fd);

    // Give it some initial random velocity
    body.setLinearVelocity(new Vec2(random(50,0), random(0, 0)));
    body.setAngularVelocity(random(0, 10));
  }
}
